package io.github.wdpm.entrylevel;
//考拉兹猜想
//    对自然数n 循环执行如下操作。
//    n 是偶数时，用n 除以2
//    n 是奇数时，用n 乘以3 后加1
//    如此循环操作的话，无论初始值是什么数字，最终都会得到1（会进入
//    1 → 4 → 2 → 1 这个循环）。

//稍微修改一下这个猜想的内容，即假设初始值为偶数时，
// 也用n 乘以3 后加1，但只是在第一次这样操作，后面的循环操作不变。
// 而我们要考虑的则是在这个条件下最终又能回到初始值的数。
// 譬如，以2为初始值，则计算过程如下。
// 2 → 7 → 22 → 11 → 34 → 17 → 52 → 26 → 13 → 40 → 20 → 10 → 5 →
// 16 → 8 → 4 → 2

//但如果初始值为6，则计算过程如下，并不能回到初始值6。
//        6 → 19 → 58 → 29 → 88 → 44 → 22 → 11 → 34 → 17 → 52 → 26 → 13
//        →40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1 → 4
//并不能回到6

//求在小于10000 的偶数中，像上述的2 或者4 这样“能回到初始值的数”有多少个

//在数字变为1 之前，能回到初始值的数
//如果数字变成了1，将会陷入 1*3+1=4 4/2=2 2/2=1的死循环
public class Q6 {
    public static void main(String[] args) {
        int cnt = 0;
        for (int i = 0; i < 10000; i += 2) {
            //init
            int initVal = i * 3 + 1;

            while (initVal != 1) {//当出现1的死循环点时跳出
                if (initVal % 2 != 0) {
                    initVal = initVal * 3 + 1;
                } else {
                    initVal = initVal / 2;
                }
                if (initVal == i) {
                    break;
                }
            }

            //再次判断initVal == i
            if (initVal == i) {
                cnt++;
            }
        }
        System.out.println("cnt: " + cnt);//34
    }
}
